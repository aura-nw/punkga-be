- name: allowed-queries
  definition:
    queries:
      - name: Public - Get user xp
        query: |
          query user_level ($wallet_address: String!) {
            user_level(where: {authorizer_user:{active_evm_address:{_ilike:$wallet_address}}}) {
              level
              xp
            }
          }
      - name: Admin - Deactive Creator By PK
        query: |
          mutation DeactiveCreatorByPk ($id: Int = 10) {
            update_creators_by_pk(pk_columns: {id:$id}, _set: {isActive:false}) {
              id
              name
              isActive
            }
          }
      - name: Admin - Deactive Manga
        query: |
          mutation DeactiveManga ($id: Int = 10) {
            update_manga_by_pk(pk_columns: {id:$id}, _set: {status:"Removed"}) {
              id
              status
              updated_at
            }
          }
      - name: Admin - Update manga status
        query: |
          mutation UpdateMangaStatus ($id: Int! = 10, $status: String! = "") {
            update_manga_by_pk(pk_columns: {id:$id}, _set: {status:$status}) {
              id
              updated_at
              status
            }
          }
      - name: Admin - Delete chapter
        query: |
          mutation DeleteChapter ($manga_id: Int = 10, $chapter_number: Int = 10) {
            delete_chapter_languages(where: {chapter:{_and:{manga_id:{_eq:$manga_id},chapter_number:{_eq:$chapter_number}}}}) {
              affected_rows
            }
            delete_chapters(where: {_and:{manga_id:{_eq:$manga_id},chapter_number:{_eq:$chapter_number}}}) {
              affected_rows
            }
          }
      - name: User - Subscribe manga
        query: |
          mutation UserSubscribeManga ($manga_id: Int = 10) {
            insert_subscribers_one(object: {manga_id:$manga_id}) {
              id
              user_id
              manga_id
              created_at
            }
          }
      - name: User - Unsubscribe manga
        query: |
          mutation UserUnsubscribeManga ($manga_id: Int = 10) {
            delete_subscribers(where: {manga_id:{_eq:$manga_id}}) {
              affected_rows
            }
          }
      - name: Admin - Create Tag
        query: |
          mutation CreateTag ($tag_languages: [tag_languages_insert_input!] = [{language_id:1,value:""}]) {
            insert_tags(objects: {tag_languages:{data:$tag_languages}}) {
              affected_rows
              returning {
                id
                created_at
                tag_languages {
                  id
                  value
                  tag_id
                  language_id
                }
              }
            }
          }
      - name: Delete tag
        query: |
          mutation DeleteTag ($id: Int = 10) {
            delete_tag_languages(where: {tag_id:{_eq:$id}}) {
              affected_rows
            }
            delete_tags(where: {id:{_eq:$id}}) {
              affected_rows
            }
          }
      - name: Public - Query all tags
        query: |
          query QueryTags {
            tags(order_by: {id:desc}) {
              id
              created_at
              tag_languages {
                id
                tag_id
                language_id
                value
              }
            }
          }
      - name: Admin - Create Manga
        query: |
          mutation CreateNewManga ($status: String = "", $banner: String = "", $poster: String = "", $manga_languages: [manga_languages_insert_input!] = {language_id:10,is_main_language:false,description:"",title:""}, $manga_creators: [manga_creator_insert_input!] = {creator_id:10}, $manga_tags: [manga_tag_insert_input!] = {tag_id:10}) {
            insert_manga_one(object: {status:$status,manga_creators:{data:$manga_creators},banner:$banner,poster:$poster,manga_languages:{data:$manga_languages},manga_tags:{data:$manga_tags}}) {
              id
              created_at
              status
            }
          }
      - name: Public - Query all languages
        query: |
          query QueryAllLanguages {
            languages {
              id
              symbol
              description
              icon
              is_main
            }
          }
      - name: Admin - Query all tags by main language
        query: |
          query QueryTagsByMainLanguage ($main_language_id: Int = 1) {
            tags(order_by: {id:desc}) {
              id
              created_at
              tag_languages(where: {language_id:{_eq:$main_language_id}}) {
                id
                tag_id
                language_id
                value
              }
            }
          }
      - name: Public - Query tag by ID
        query: |
          query QueryTagById ($id: Int = 10) {
            tags_by_pk(id: $id) {
              id
              tag_languages {
                id
                tag_id
                language_id
                value
                tag_languages_language {
                  description
                }
              }
            }
          }
      - name: User - Unlike chapter
        query: |
          mutation UserUnLikeChapter ($chapter_id: Int!) {
            delete_likes(where: {chapter_id:{_eq:$chapter_id}}) {
              affected_rows
            }
          }
      - name: User - Like chapter
        query: |
          mutation UserLikeChapter ($chapter_id: Int!) {
            insert_likes_one(object: {chapter_id:$chapter_id}) {
              id
              user_id
              chapter_id
              created_at
            }
          }
      - name: User - Add comment in chapter
        query: |
          mutation AddUserComment ($chapter_id: Int = 21, $ref_activity: Int, $content: String = "") {
            insert_social_activities_one(object: {chapter_id:$chapter_id,content:$content,ref_activity:$ref_activity}) {
              id
              content
              user_id
              ref_activity
            }
          }
      - name: Admin - Update tag by ID
        query: |
          mutation UpdateTag ($tag_id: Int! = 10, $tag_languages: [tag_languages_insert_input!] = {language_id:1,value:""}) {
            delete_tag_languages(where: {tag_id:{_eq:$tag_id}}) {
              affected_rows
            }
            insert_tags(objects: {id:$tag_id,tag_languages:{data:$tag_languages}}, on_conflict: {constraint:tags_pkey,update_columns:id}) {
              returning {
                id
                tag_languages {
                  language_id
                  value
                }
              }
            }
          }
      - name: Public - Get Chapter Comments
        query: |
          query GetChapterComments ($chapter_id: Int!) {
            social_activities(where: {_and:{ref_activity:{_is_null:true},chapter_id:{_eq:$chapter_id}}}, order_by: {created_at:desc}) {
              id
              social_activities_authorizer_user {
                id
                nickname
                picture
              }
              content
              created_at
              replies: social_activities(order_by: {created_at:asc}) {
                social_activities_authorizer_user {
                  id
                  nickname
                  picture
                }
                content
                created_at
              }
            }
          }
      - name: User - Set address
        query: |
          mutation SetUserWalletAddress ($wallet_address: String!) {
            update_authorizer_users(where: {wallet_address:{_is_null:true}}, _set: {wallet_address:$wallet_address}) {
              returning {
                id
                wallet_address
              }
              affected_rows
            }
          }
      - name: Admin - Delete User
        query: |
          mutation DeleteUser ($id: bpchar!) {
            delete_authorizer_sessions(where: {id:{_eq:$id}}) {
              affected_rows
            }
            delete_likes(where: {user_id:{_eq:$id}}) {
              affected_rows
            }
            delete_subscribers(where: {user_id:{_eq:$id}}) {
              affected_rows
            }
            update_social_activities(where: {user_id:{_eq:$id}}, _set: {user_id:null,content:""}) {
              affected_rows
            }
            delete_authorizer_users(where: {id:{_eq:$id}}) {
              affected_rows
            }
          }
      - name: Public - Query User
        query: |
          query QueryUser ($user_id: bpchar = "") {
            authorizer_users(where: {id:{_eq:$user_id}}) {
              id
              email
              nickname
              birthdate
              bio
              picture
              gender
            }
          }
      - name: Public - Search manga
        query: |
          query SearchManga ($text: String = "%%") {
            manga(where: {_and:{_or:[{manga_languages:{title:{_ilike:$text}}},{manga_creators:{creator:{name:{_ilike:$text}}}}],status:{_neq:"Removed"}}}, limit: 20) {
              id
              slug
              manga_creators {
                creator {
                  id
                  slug
                  name
                  pen_name
                  isActive
                }
              }
              status
              chapters(limit: 1, order_by: {updated_at:desc}, where: {status:{_eq:"Published"}}) {
                id
                chapter_number
                updated_at
              }
              manga_tags(limit: 5) {
                tag {
                  id
                  tag_languages {
                    language_id
                    tag_id
                    value
                  }
                }
              }
              manga_languages {
                title
                description
                is_main_language
                language_id
              }
              banner
              poster
              manga_total_likes {
                likes
              }
              manga_total_views {
                views
              }
            }
          }
      - name: Public - Get trending manga
        query: |
          query GetTrendingManga {
            manga(order_by: {manga_total_views:{views:desc_nulls_last}}, limit: 4, where: {status:{_neq:"Removed"}}) {
              id
              slug
              chapters(limit: 1, order_by: {chapter_number:desc}, where: {status:{_eq:"Published"}}) {
                id
                chapter_number
                updated_at
              }
              manga_total_likes {
                likes
              }
              manga_total_views {
                views
              }
              manga_tags(limit: 5) {
                tag {
                  id
                  tag_languages {
                    language_id
                    tag_id
                    value
                  }
                }
              }
              manga_languages {
                title
                language_id
                is_main_language
                description
              }
              banner
              poster
              status
              manga_creators {
                creator {
                  name
                  pen_name
                  id
                  slug
                  isActive
                }
              }
            }
          }
      - name: Public - Subscribe email
        query: |
          mutation SubscribeEmail ($email: String) {
            insert_email_subscribe(objects: {email:$email}) {
              affected_rows
            }
          }
      - name: Public - Get chapter detail
        query: |
          query GetChapterReadingDetail ($slug: String, $chapter_number: Int = 1, $user_id: bpchar = "") {
            chapters(where: {_and:{chapter_number:{_eq:$chapter_number},manga:{_and:{slug:{_eq:$slug},_or:[{status:{_ilike:"On-going"}},{status:{_eq:"Finished"}}]}}}}) {
              id
              chapter_number
              chapter_name
              chapter_type
              thumbnail_url
              status
              pushlish_date
              chapter_languages(where: {chapter:{status:{_eq:"Published"}}}) {
                language_id
                detail
              }
              comments: social_activities_aggregate {
                aggregate {
                  count
                }
              }
              views
              chapters_likes_aggregate {
                aggregate {
                  count
                }
              }
              chapters_likes(where: {user_id:{_eq:$user_id}}) {
                id
                created_at
                user_id
                chapter_id
              }
            }
          }
      - name: Public - Query latest update manga
        query: |
          query GetLatestUpdatedManga {
            manga(order_by: {latest_published:desc_nulls_last}, where: {status:{_neq:"Removed"}}) {
              id
              slug
              latest_published
              manga_total_views {
                views
              }
              manga_total_likes {
                likes
              }
              manga_creators {
                creator {
                  id
                  slug
                  name
                  pen_name
                  isActive
                }
              }
              status
              chapters(limit: 1, order_by: {chapter_number:desc}, where: {status:{_eq:"Published"}}) {
                id
                chapter_number
                pushlish_date
                status
                updated_at
              }
              manga_tags(limit: 5) {
                tag {
                  id
                  tag_languages {
                    language_id
                    tag_id
                    value
                  }
                }
              }
              manga_languages {
                title
                description
                is_main_language
                language_id
              }
              banner
              poster
            }
          }
      - name: Public - Get manga list by list id
        query: |
          query GetListMangaById ($id: [Int!]) {
            manga(where: {_and:{id:{_in:$id},status:{_neq:"Removed"}}}) {
              id
              slug
              banner
              poster
              status
              nearest_upcoming
              manga_languages {
                is_main_language
                language_id
                title
              }
              manga_creators {
                creator {
                  id
                  slug
                  name
                  pen_name
                  isActive
                }
              }
              chapters(order_by: {chapter_number:desc_nulls_last}, limit: 1, where: {status:{_eq:"Published"}}) {
                chapter_number
                id
                pushlish_date
              }
              manga_total_views {
                views
              }
              manga_total_likes {
                likes
              }
              manga_tags(limit: 5) {
                tag {
                  id
                  tag_languages {
                    language_id
                    value
                  }
                }
              }
            }
          }
      - name: Public - Get manga detail
        query: |
          query GetMangaReadingDetail ($user_id: bpchar = "", $slug: String = "") {
            manga(where: {_and:{slug:{_eq:$slug},status:{_neq:"Removed"}}}) {
              id
              slug
              poster
              banner
              contract_addresses
              status
              release_date
              manga_creators {
                creator {
                  id
                  slug
                  name
                  pen_name
                  isActive
                }
              }
              manga_total_likes {
                likes
              }
              manga_total_views {
                views
              }
              manga_languages {
                title
                description
                is_main_language
                language_id
              }
              chapters_aggregate {
                aggregate {
                  count
                }
              }
              chapters(order_by: {chapter_number:desc_nulls_last}, where: {status:{_neq:"Inactive"}}) {
                id
                chapter_number
                chapter_name
                chapter_type
                thumbnail_url
                pushlish_date
                status
                views
                chapter_total_likes {
                  likes
                }
                chapters_likes(where: {user_id:{_eq:$user_id}}) {
                  id
                  created_at
                }
              }
              manga_subscribers_aggregate {
                aggregate {
                  count
                }
              }
              manga_tags(limit: 5) {
                tag {
                  id
                  tag_languages {
                    language_id
                    value
                  }
                }
              }
              manga_subscribers(where: {user_id:{_eq:$user_id}}) {
                id
                created_at
              }
            }
          }
      - name: Public - Get subscribe list
        query: |
          query GetSubscribeList ($user_id: bpchar = "") {
            subscribers(order_by: {created_at:desc}, where: {_and:{user_id:{_eq:$user_id},subscribers_manga:{status:{_neq:"Removed"}}}}) {
              subscribers_manga {
                id
                slug
                banner
                poster
                status
                nearest_upcoming
                manga_languages {
                  is_main_language
                  language_id
                  title
                }
                manga_creators {
                  creator {
                    id
                    slug
                    name
                    pen_name
                    isActive
                  }
                }
                chapters(order_by: {chapter_number:desc_nulls_last}, limit: 1, where: {status:{_eq:"Published"}}) {
                  chapter_number
                  id
                  pushlish_date
                }
                manga_total_views {
                  views
                }
                manga_total_likes {
                  likes
                }
                manga_tags(limit: 5) {
                  tag {
                    id
                    tag_languages {
                      language_id
                      value
                    }
                  }
                }
              }
              user_id
            }
          }
      - name: Admin - Delete campaign
        query: |
          mutation delete_campaign_by_pk ($id: Int!) {
            delete_quests(where: {campaign_id:{_eq:$id}}) {
              affected_rows
            }
            delete_campaign_by_pk(id: $id) {
              id
            }
          }
      - name: Admin - Delete quest
        query: |
          mutation delete_quests_by_pk ($id: Int!) {
            delete_quests_by_pk(id: $id) {
              campaign_id
              condition
              created_at
              id
              name
              requirement
              reward
              status
              type
              updated_at
            }
          }
      - name: Admin - Query List Manga
        query: |
          query QueryListManga {
            manga(order_by: {created_at:desc}) {
              id
              slug
              banner
              poster
              status
              release_date
              publish_date
              created_at
              manga_creators {
                creator {
                  name
                  pen_name
                }
              }
              chapters_aggregate {
                aggregate {
                  count
                  max {
                    chapter_number
                  }
                }
              }
              published_chapters_aggregate: chapters_aggregate(where: {status:{_eq:"Published"}}) {
                aggregate {
                  count
                }
              }
              manga_languages {
                id
                title
                language_id
                is_main_language
              }
            }
          }
      - name: User - Query rank
        query: |
          query user_xp_rank {
            user_xp_rank {
              level
              rank
              user_id
              xp
            }
          }
      - name: Public - Get leaderboard
        query: |
          query leaderboard {
            user_level(limit: 20, order_by: [{xp:desc_nulls_last},{updated_at:asc}]) {
              xp
              level
              updated_at
              authorizer_user {
                id
                picture
                nickname
                user_quests_aggregate {
                  aggregate {
                    count
                  }
                }
                email
                gender
                bio
                birthdate
              }
            }
          }
      - name: Public - Get all manga
        query: |
          query QueryAllManga {
            manga {
              id
              slug
              chapters {
                chapter_number
              }
            }
          }
      - name: Admin - Update campaign
        query: |
          mutation update_campaign ($id: Int!, $name: String!, $status: String!, $description: String!) {
            update_campaign(where: {id:{_eq:$id}}, _set: {name:$name,status:$status,description:$description}) {
              returning {
                id
                name
                status
                updated_at
              }
              affected_rows
            }
          }
      - name: User - Get user campaign rank
        query: |
          query user_campaign_rank ($id: Int!, $user_id: bpchar!) {
            user_campaign(where: {campaign_id:{_eq:$id},user_id:{_eq:$user_id}}) {
              user_id
              total_reward_xp
              user_campaign_rank
              campaign_id
            }
          }
      - name: Public - Get quest info
        query: |
          query quests ($id: Int!) {
            quests(where: {id:{_eq:$id}}) {
              id
              name
              condition
              description
              repeat
              requirement
              reward
              status
              type
              created_at
            }
          }
      - name: Public - Get campaign leaderboard
        query: |
          query user_campaign_leaderboard ($id: Int!) {
            user_campaign(limit: 20, order_by: {total_reward_xp:desc_nulls_last,updated_at:asc}, where: {campaign_id:{_eq:$id}}) {
              user_id
              total_reward_xp
              user_campaign_authorizer_user {
                id
                picture
                nickname
                email
                gender
                bio
                birthdate
                levels {
                  xp
                  level
                }
              }
            }
          }
      - name: Admin - Query creators
        query: |
          query QueryCreators {
            creators(order_by: {created_at:desc}) {
              id
              name
              total_subscribers
              manga_creators_aggregate {
                aggregate {
                  count
                }
              }
              created_at
              socials
              isActive
              bio
              avatar_url
              dob
              gender
              pen_name
              wallet_address
            }
          }
      - name: Public - Query creator by id
        query: |
          query QueryCreatorById ($id: Int!) {
            creators(where: {id:{_eq:$id}}) {
              id
              slug
              avatar_url
              bio
              dob
              gender
              name
              pen_name
              socials
              wallet_address
              total_subscribers
              isActive
              created_at
              manga_creators(where: {manga:{status:{_neq:"Removed"}}}) {
                manga {
                  id
                  status
                  poster
                  banner
                  manga_creators {
                    creator {
                      name
                      pen_name
                      id
                      slug
                    }
                  }
                  manga_total_likes {
                    likes
                  }
                  manga_total_views {
                    views
                  }
                  manga_tags {
                    tag {
                      tag_languages {
                        language_id
                        value
                      }
                      id
                    }
                  }
                  chapters(limit: 1, order_by: {chapter_number:desc}, where: {status:{_eq:"Published"}}) {
                    id
                    chapter_number
                    chapter_name
                  }
                  contract_addresses
                  manga_languages {
                    id
                    is_main_language
                    title
                    description
                  }
                }
              }
            }
          }
      - name: Admin - Search users
        query: |
          query search_users ($text: String = "%%", $offset: Int = 0, $limit: Int = 100) {
            authorizer_users(order_by: {created_at:desc}, offset: $offset, limit: $limit, where: {_or:[{email:{_like:$text}},{nickname:{_like:$text}}]}) {
              id
              nickname
              email
              created_at
              updated_at
            }
            authorizer_users_aggregate(where: {_or:[{email:{_like:$text}},{nickname:{_like:$text}}]}) {
              aggregate {
                count
              }
            }
          }
      - name: Admin - Query all campaign
        query: |
          query campaign {
            campaign(order_by: {created_at:desc}) {
              created_at
              updated_at
              id
              slug
              name
              status
              start_date
              end_date
              reward
              description
              campaign_i18n {
                language_id
                data
                created_at
                i18n_language {
                  id
                  is_main
                  symbol
                  icon
                  description
                }
              }
              campaign_quests_aggregate(where: {status:{_eq:"Published"}}) {
                aggregate {
                  count
                }
              }
            }
          }
      - name: Public - Get user campaign xp
        query: |
          query user_campaign ($user_id: bpchar!, $campaign_id: Int!) {
            user_campaign(where: {user_id:{_eq:$user_id},campaign_id:{_eq:$campaign_id}}) {
              user_id
              campaign_id
              total_reward_xp
              updated_at
            }
          }
      - name: Admin - Get All Users
        query: |
          query GetAllUsers ($limit: Int = 50, $offset: Int = 0) {
            authorizer_users(order_by: {created_at:desc}, limit: $limit, offset: $offset) {
              id
              nickname
              email
              created_at
              updated_at
            }
            authorizer_users_aggregate {
              aggregate {
                count
              }
            }
          }
      - name: Public - Query all chain
        query: |
          query chains {
            chains {
              id
              name
              rpc
              chain_id
              address_type
              contracts
              created_at
            }
          }
      - name: Admin - Create Quest
        query: |
          mutation insert_quests ($type: String!, $condition: jsonb = "", $requirement: jsonb!, $reward: jsonb!, $status: String!, $campaign_id: Int!, $repeat: String!, $quest_languages: [i18n_insert_input!] = {}) {
            insert_quests(objects: {type:$type,condition:$condition,requirement:$requirement,reward:$reward,status:$status,campaign_id:$campaign_id,repeat:$repeat,quests_i18n:{data:$quest_languages}}) {
              affected_rows
              returning {
                id
                campaign_id
                status
                quests_i18n {
                  language_id
                  data
                }
              }
            }
          }
      - name: Admin - Update quest
        query: |
          mutation update_quests ($type: String!, $condition: jsonb = "", $requirement: jsonb!, $reward: jsonb!, $status: String!, $id: Int!, $repeat: String!, $quest_languages: [i18n_insert_input!] = {}) {
            update_quests(where: {id:{_eq:$id}}, _set: {type:$type,condition:$condition,requirement:$requirement,reward:$reward,status:$status,repeat:$repeat}) {
              affected_rows
              returning {
                id
                status
                updated_at
              }
            }
            insert_i18n(objects: $quest_languages, on_conflict: {constraint:i18n_quest_id_language_id_key,update_columns:data}) {
              affected_rows
              returning {
                data
              }
            }
          }
      - name: Admin - Query campaign detail
        query: |
          query campaign_by_pk ($id: Int!) {
            campaign_by_pk(id: $id) {
              created_at
              updated_at
              id
              slug
              name
              status
              start_date
              end_date
              reward
              description
              campaign_chain {
                id
                name
                punkga_config
                contracts
              }
              campaign_i18n {
                language_id
                data
                created_at
                i18n_language {
                  id
                  is_main
                  symbol
                  icon
                  description
                }
              }
              campaign_quests(order_by: {created_at:desc}) {
                created_at
                updated_at
                id
                name
                description
                type
                repeat
                condition
                reward
                status
                quests_i18n {
                  id
                  quest_id
                  language_id
                  data
                }
              }
            }
          }
      - name: Admin - Get quest by id
        query: |
          query quests_by_pk ($id: Int!) {
            quests_by_pk(id: $id) {
              campaign_id
              condition
              created_at
              id
              requirement
              reward
              status
              type
              repeat
              updated_at
              quests_campaign {
                name
                created_at
                campaign_chain {
                  punkga_config
                }
              }
              quests_i18n {
                i18n_language {
                  id
                  is_main
                  symbol
                  icon
                }
                data
              }
            }
          }
      - name: Public - query artwork by creator
        query: |
          query artworks ($creator_id: Int!, $limit: Int = 10, $offset: Int = 0) {
            artworks(where: {creator_id:{_eq:$creator_id}}, limit: $limit, offset: $offset) {
              id
              url
              contest_id
              contest_round
              source_url
            }
            artworks_aggregate(where: {creator_id:{_eq:$creator_id}}) {
              aggregate {
                count
              }
            }
          }
      - name: Public - Get creator launchpad
        query: |
          query launchpad ($creator_id: Int!) {
            launchpad(where: {creator_id:{_eq:$creator_id}}) {
              id
              slug
              launchpad_i18ns {
                data
                i18n_language {
                  is_main
                  symbol
                  id
                }
              }
              featured_images
              contract_address
              created_at
              launchpad_creator {
                id
                slug
                pen_name
                avatar_url
              }
            }
          }
      - name: Public - Get manga by creator and contest
        query: |
          query manga ($contest_id: Int!, $id: Int!, $limit: Int = 100, $offset: Int = 0) {
            manga(where: {contest_id:{_eq:$contest_id},manga_creators:{creator_id:{_eq:$id}}}, limit: $limit, offset: $offset) {
              banner
              id
              slug
              poster
            }
            manga_aggregate(where: {contest_id:{_eq:$contest_id},manga_creators:{creator_id:{_eq:$id}}}, limit: $limit, offset: $offset) {
              aggregate {
                count
              }
            }
          }
      - name: Public - Get artwork by creator and contest
        query: |
          query artwork ($contest_id: Int!, $id: Int!, $limit: Int = 100, $offset: Int = 0) {
            artworks(where: {contest_id:{_eq:$contest_id},creator_id:{_eq:$id}}, limit: $limit, offset: $offset) {
              id
              url
              source_url
              created_at
            }
            artworks_aggregate(where: {contest_id:{_eq:$contest_id},creator_id:{_eq:$id}}, limit: $limit, offset: $offset) {
              aggregate {
                count
              }
            }
          }
      - name: Public - Get contest by creator id
        query: |
          query contest ($creator_id: Int!, $limit: Int = 10, $offset: Int = 0) {
            contest(where: {_or:[{contest_artworks:{creator_id:{_eq:$creator_id}}},{contest_mangas:{manga_creators:{creator_id:{_eq:$creator_id}}}}]}, limit: $limit, offset: $offset) {
              id
              start_date
              end_date
              slug
              created_at
              contest_i18ns {
                data
                i18n_language {
                  id
                  is_main
                  symbol
                }
              }
            }
            contest_aggregate(where: {_or:[{contest_artworks:{creator_id:{_eq:$creator_id}}},{contest_mangas:{manga_creators:{creator_id:{_eq:$creator_id}}}}]}, limit: $limit, offset: $offset) {
              aggregate {
                count
              }
            }
          }
      - name: Admin - Delete Manga Collection
        query: |
          mutation delete_manga_collection_by_pk ($id: Int!) {
            delete_manga_collection_by_pk(id: $id) {
              id
            }
          }
      - name: Admin - Delete Chapter Collection
        query: |
          mutation delete_chapter_collection_by_pk ($id: Int!) {
            delete_chapter_collection_by_pk(id: $id) {
              id
            }
          }
      - name: Admin - Get manga detail
        query: |
          query GetMangaReadingDetail ($id: Int = 28) {
            manga_by_pk(id: $id) {
              id
              poster
              banner
              status
              contract_addresses
              publish_date
              release_date
              created_at
              manga_languages {
                title
                description
                is_main_language
                language_id
              }
              chapters_aggregate {
                aggregate {
                  sum {
                    views
                    likes
                  }
                  count
                }
              }
              manga_subscribers_aggregate {
                aggregate {
                  count
                }
              }
              manga_tags {
                tag {
                  tag_languages {
                    tag_id
                    language_id
                    value
                  }
                }
              }
              chapters(order_by: {chapter_number:desc_nulls_last}) {
                id
                chapter_number
                chapter_name
                chapter_type
                thumbnail_url
                pushlish_date
                status
              }
              manga_creators {
                creator {
                  id
                  slug
                  name
                  pen_name
                }
              }
              manga_collections {
                launchpad_id
                manga_id
                manga_collection {
                  contract_address
                  launchpad_creator {
                    name
                    slug
                    id
                  }
                  launchpad_i18ns {
                    data(path: "name")
                    language_id
                    id
                  }
                  slug
                  status
                  updated_at
                  created_at
                }
                id
              }
            }
          }
      - name: Admin - Get chapter detail
        query: |
          query GetChapterDetail ($manga_id: Int = 18, $chapter_number: Int = 1) {
            chapters(where: {_and:{chapter_number:{_eq:$chapter_number},manga:{id:{_eq:$manga_id}}}}) {
              id
              chapter_number
              chapter_name
              chapter_type
              thumbnail_url
              status
              pushlish_date
              chapter_languages {
                language_id
                detail
              }
              chapter_collections {
                id
                chapter_collection {
                  contract_address
                  launchpad_creator {
                    name
                    slug
                    id
                  }
                  launchpad_i18ns {
                    data(path: "name")
                    language_id
                    id
                  }
                  slug
                  status
                  updated_at
                  created_at
                }
                chapter_id
                launchpad_id
              }
            }
          }
      - name: Admin - Insert Chapter Collection
        query: |
          mutation insert_chapter_collection ($objects: [chapter_collection_insert_input!] = {}) {
            insert_chapter_collection(objects: $objects, on_conflict: {constraint:chapter_collection_chapter_id_launchpad_id_key,update_columns:chapter_id}) {
              affected_rows
              returning {
                chapter_id
                created_at
                id
                launchpad_id
              }
            }
          }
      - name: Public - Query albums by creator id
        query: |
          query albums ($creator_id: Int!, $limit: Int = 100, $offset: Int = 0) {
            albums(where: {_or:[{_and:{id:{_eq:1},show:{_eq:true}}},{_and:{creator_id:{_eq:$creator_id},show:{_eq:true}}}]}, limit: $limit, offset: $offset) {
              id
              show
              thumbnail_url
              name
              disable
            }
            albums_aggregate(where: {_or:[{_and:{id:{_eq:1},show:{_eq:true}}},{_and:{creator_id:{_eq:$creator_id},show:{_eq:true}}}]}) {
              aggregate {
                count
              }
            }
          }
      - name: Public - Query album detail
        query: |
          query albums ($id: Int!, $limit: Int = 10, $offset: Int = 0, $creator_id: Int!) {
            albums(where: {id:{_eq:$id},show:{_eq:true},disable:{_eq:false}}) {
              id
              name
              thumbnail_url
              show
              disable
              artworks(limit: $limit, offset: $offset, where: {creator_id:{_eq:$creator_id}}) {
                id
                name
                url
              }
              artworks_aggregate(where: {creator_id:{_eq:$creator_id}}) {
                aggregate {
                  count
                }
              }
            }
          }
      - name: Public - Get manga by creator
        query: |
          query manga ($id: Int!, $limit: Int = 10, $offset: Int = 0) {
            manga(limit: $limit, offset: $offset, where: {manga_creators:{creator_id:{_eq:$id}},status:{_neq:"Removed"}}) {
              id
              slug
              status
              poster
              banner
              manga_creators {
                creator {
                  name
                  pen_name
                  id
                  slug
                  isActive
                }
              }
              manga_total_likes {
                likes
              }
              manga_total_views {
                views
              }
              manga_tags {
                tag {
                  tag_languages {
                    language_id
                    value
                  }
                  id
                }
              }
              chapters(limit: 1, order_by: {chapter_number:desc}, where: {status:{_eq:"Published"}}) {
                id
                chapter_number
                chapter_name
              }
              contract_addresses
              manga_languages {
                id
                is_main_language
                title
                description
                language_id
              }
            }
          }
      - name: User - Get Profile
        query: |
          query GetUserProfile {
            authorizer_users(limit: 1) {
              id
              email
              email_verified_at
              bio
              birthdate
              gender
              active_wallet_address: active_evm_address
              wallet_address
              ton_wallet_address
              nickname
              picture
              signup_methods
              levels {
                xp
                level
                user_level_chain {
                  id
                  name
                  punkga_config
                }
              }
              authorizer_users_user_wallet {
                address
              }
              user_quests_aggregate {
                aggregate {
                  count
                }
              }
              user_quests(order_by: {created_at:desc}, limit: 20) {
                created_at
                status
                user_quest_rewards {
                  tx_hash
                }
                quest {
                  id
                  name
                  quests_campaign {
                    campaign_chain {
                      punkga_config
                    }
                  }
                  quests_i18n {
                    id
                    quest_id
                    language_id
                    data
                    i18n_language {
                      id
                      description
                      icon
                      is_main
                      symbol
                    }
                  }
                  reward
                }
              }
            }
          }
